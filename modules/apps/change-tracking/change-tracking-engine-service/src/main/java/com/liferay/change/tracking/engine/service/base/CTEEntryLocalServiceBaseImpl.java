/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.engine.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.change.tracking.engine.model.CTEEntry;
import com.liferay.change.tracking.engine.service.CTEEntryLocalService;
import com.liferay.change.tracking.engine.service.persistence.CTECollectionPersistence;
import com.liferay.change.tracking.engine.service.persistence.CTEEntryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cte entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.change.tracking.engine.service.impl.CTEEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.change.tracking.engine.service.impl.CTEEntryLocalServiceImpl
 * @see com.liferay.change.tracking.engine.service.CTEEntryLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CTEEntryLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CTEEntryLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.change.tracking.engine.service.CTEEntryLocalServiceUtil} to access the cte entry local service.
	 */

	/**
	 * Adds the cte entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteEntry the cte entry
	 * @return the cte entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEEntry addCTEEntry(CTEEntry cteEntry) {
		cteEntry.setNew(true);

		return cteEntryPersistence.update(cteEntry);
	}

	/**
	 * Creates a new cte entry with the primary key. Does not add the cte entry to the database.
	 *
	 * @param entryId the primary key for the new cte entry
	 * @return the new cte entry
	 */
	@Override
	@Transactional(enabled = false)
	public CTEEntry createCTEEntry(long entryId) {
		return cteEntryPersistence.create(entryId);
	}

	/**
	 * Deletes the cte entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entryId the primary key of the cte entry
	 * @return the cte entry that was removed
	 * @throws PortalException if a cte entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEEntry deleteCTEEntry(long entryId) throws PortalException {
		return cteEntryPersistence.remove(entryId);
	}

	/**
	 * Deletes the cte entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteEntry the cte entry
	 * @return the cte entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEEntry deleteCTEEntry(CTEEntry cteEntry) {
		return cteEntryPersistence.remove(cteEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CTEEntry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cteEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cteEntryPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cteEntryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cteEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cteEntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CTEEntry fetchCTEEntry(long entryId) {
		return cteEntryPersistence.fetchByPrimaryKey(entryId);
	}

	/**
	 * Returns the cte entry with the primary key.
	 *
	 * @param entryId the primary key of the cte entry
	 * @return the cte entry
	 * @throws PortalException if a cte entry with the primary key could not be found
	 */
	@Override
	public CTEEntry getCTEEntry(long entryId) throws PortalException {
		return cteEntryPersistence.findByPrimaryKey(entryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cteEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cteEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CTEEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cteEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cteEntryLocalService.deleteCTEEntry((CTEEntry)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cteEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	@Override
	public List<?extends PersistedModel> getPersistedModel(long resourcePrimKey)
		throws PortalException {
		return cteEntryPersistence.findByResourcePrimKey(resourcePrimKey);
	}

	/**
	 * Returns a range of all the cte entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cte entries
	 * @param end the upper bound of the range of cte entries (not inclusive)
	 * @return the range of cte entries
	 */
	@Override
	public List<CTEEntry> getCTEEntries(int start, int end) {
		return cteEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cte entries.
	 *
	 * @return the number of cte entries
	 */
	@Override
	public int getCTEEntriesCount() {
		return cteEntryPersistence.countAll();
	}

	/**
	 * Updates the cte entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cteEntry the cte entry
	 * @return the cte entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEEntry updateCTEEntry(CTEEntry cteEntry) {
		return cteEntryPersistence.update(cteEntry);
	}

	/**
	 */
	@Override
	public void addCTECollectionCTEEntry(long collectionId, long entryId) {
		cteCollectionPersistence.addCTEEntry(collectionId, entryId);
	}

	/**
	 */
	@Override
	public void addCTECollectionCTEEntry(long collectionId, CTEEntry cteEntry) {
		cteCollectionPersistence.addCTEEntry(collectionId, cteEntry);
	}

	/**
	 */
	@Override
	public void addCTECollectionCTEEntries(long collectionId, long[] entryIds) {
		cteCollectionPersistence.addCTEEntries(collectionId, entryIds);
	}

	/**
	 */
	@Override
	public void addCTECollectionCTEEntries(long collectionId,
		List<CTEEntry> cteEntries) {
		cteCollectionPersistence.addCTEEntries(collectionId, cteEntries);
	}

	/**
	 */
	@Override
	public void clearCTECollectionCTEEntries(long collectionId) {
		cteCollectionPersistence.clearCTEEntries(collectionId);
	}

	/**
	 */
	@Override
	public void deleteCTECollectionCTEEntry(long collectionId, long entryId) {
		cteCollectionPersistence.removeCTEEntry(collectionId, entryId);
	}

	/**
	 */
	@Override
	public void deleteCTECollectionCTEEntry(long collectionId, CTEEntry cteEntry) {
		cteCollectionPersistence.removeCTEEntry(collectionId, cteEntry);
	}

	/**
	 */
	@Override
	public void deleteCTECollectionCTEEntries(long collectionId, long[] entryIds) {
		cteCollectionPersistence.removeCTEEntries(collectionId, entryIds);
	}

	/**
	 */
	@Override
	public void deleteCTECollectionCTEEntries(long collectionId,
		List<CTEEntry> cteEntries) {
		cteCollectionPersistence.removeCTEEntries(collectionId, cteEntries);
	}

	/**
	 * Returns the collectionIds of the cte collections associated with the cte entry.
	 *
	 * @param entryId the entryId of the cte entry
	 * @return long[] the collectionIds of cte collections associated with the cte entry
	 */
	@Override
	public long[] getCTECollectionPrimaryKeys(long entryId) {
		return cteEntryPersistence.getCTECollectionPrimaryKeys(entryId);
	}

	/**
	 */
	@Override
	public List<CTEEntry> getCTECollectionCTEEntries(long collectionId) {
		return cteCollectionPersistence.getCTEEntries(collectionId);
	}

	/**
	 */
	@Override
	public List<CTEEntry> getCTECollectionCTEEntries(long collectionId,
		int start, int end) {
		return cteCollectionPersistence.getCTEEntries(collectionId, start, end);
	}

	/**
	 */
	@Override
	public List<CTEEntry> getCTECollectionCTEEntries(long collectionId,
		int start, int end, OrderByComparator<CTEEntry> orderByComparator) {
		return cteCollectionPersistence.getCTEEntries(collectionId, start, end,
			orderByComparator);
	}

	/**
	 */
	@Override
	public int getCTECollectionCTEEntriesCount(long collectionId) {
		return cteCollectionPersistence.getCTEEntriesSize(collectionId);
	}

	/**
	 */
	@Override
	public boolean hasCTECollectionCTEEntry(long collectionId, long entryId) {
		return cteCollectionPersistence.containsCTEEntry(collectionId, entryId);
	}

	/**
	 */
	@Override
	public boolean hasCTECollectionCTEEntries(long collectionId) {
		return cteCollectionPersistence.containsCTEEntries(collectionId);
	}

	/**
	 */
	@Override
	public void setCTECollectionCTEEntries(long collectionId, long[] entryIds) {
		cteCollectionPersistence.setCTEEntries(collectionId, entryIds);
	}

	/**
	 * Returns the cte collection local service.
	 *
	 * @return the cte collection local service
	 */
	public com.liferay.change.tracking.engine.service.CTECollectionLocalService getCTECollectionLocalService() {
		return cteCollectionLocalService;
	}

	/**
	 * Sets the cte collection local service.
	 *
	 * @param cteCollectionLocalService the cte collection local service
	 */
	public void setCTECollectionLocalService(
		com.liferay.change.tracking.engine.service.CTECollectionLocalService cteCollectionLocalService) {
		this.cteCollectionLocalService = cteCollectionLocalService;
	}

	/**
	 * Returns the cte collection persistence.
	 *
	 * @return the cte collection persistence
	 */
	public CTECollectionPersistence getCTECollectionPersistence() {
		return cteCollectionPersistence;
	}

	/**
	 * Sets the cte collection persistence.
	 *
	 * @param cteCollectionPersistence the cte collection persistence
	 */
	public void setCTECollectionPersistence(
		CTECollectionPersistence cteCollectionPersistence) {
		this.cteCollectionPersistence = cteCollectionPersistence;
	}

	/**
	 * Returns the cte entry local service.
	 *
	 * @return the cte entry local service
	 */
	public CTEEntryLocalService getCTEEntryLocalService() {
		return cteEntryLocalService;
	}

	/**
	 * Sets the cte entry local service.
	 *
	 * @param cteEntryLocalService the cte entry local service
	 */
	public void setCTEEntryLocalService(
		CTEEntryLocalService cteEntryLocalService) {
		this.cteEntryLocalService = cteEntryLocalService;
	}

	/**
	 * Returns the cte entry persistence.
	 *
	 * @return the cte entry persistence
	 */
	public CTEEntryPersistence getCTEEntryPersistence() {
		return cteEntryPersistence;
	}

	/**
	 * Sets the cte entry persistence.
	 *
	 * @param cteEntryPersistence the cte entry persistence
	 */
	public void setCTEEntryPersistence(CTEEntryPersistence cteEntryPersistence) {
		this.cteEntryPersistence = cteEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.change.tracking.engine.model.CTEEntry",
			cteEntryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.change.tracking.engine.model.CTEEntry");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CTEEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CTEEntry.class;
	}

	protected String getModelClassName() {
		return CTEEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cteEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.change.tracking.engine.service.CTECollectionLocalService.class)
	protected com.liferay.change.tracking.engine.service.CTECollectionLocalService cteCollectionLocalService;
	@BeanReference(type = CTECollectionPersistence.class)
	protected CTECollectionPersistence cteCollectionPersistence;
	@BeanReference(type = CTEEntryLocalService.class)
	protected CTEEntryLocalService cteEntryLocalService;
	@BeanReference(type = CTEEntryPersistence.class)
	protected CTEEntryPersistence cteEntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}